Task-1
#includeiostream
#includevector
using namespace std;
 
class Navigation
{
public
void choice()
{
while (true)
{
cout  Enter choice to navigate   endl;
cout  1.Main Menu  endl;
cout  0.Exit  endl;
int n;
cin  n;
 
switch (n)
{
case 1
main_menu();
break;
case 0
cout  Exited.;
exit(0);

default
cout  Entered wrong number.;
}
}
}
void main_menu()
{
while (true)
{
cout  Enter choice to navigate   endl;
cout  1.Settings  endl;
cout  2.Media  endl;
cout  3.Back  endl;
cout  0.exit  endl;
int n;
cin  n;
switch (n)
{
case 1
settings();
break;
case 2
media();
break;
case 3
choice();
break;
case 0
cout  Exited.;
exit(0);
 
default
cout  Entered wrong number.;
}
}
}
void settings()
{
while (true)
{
cout  Enter choice to navigate   endl;
cout  1.Display settings  endl;
cout  2.Audio settings  endl;
cout  3.Back  endl;
cout  0.exit  endl;
int n;
cin  n;
switch (n)
{
case 1
cout  Brightness level 56.n  endl;
break;
case 2
cout  Volumn level 70.n  endl;
break;
case 3
main_menu();
break;
case 0
cout  Exited.;
exit(0);
 
default
cout  Entered wrong number.;
}
}
}
void media()
{
while (true)
{
cout  Enter choice to navigate   endl;
cout  1.Radio  endl;
cout  2.Bluetooth Audio  endl;
cout  3.Back  endl;
cout  0.exit  endl;
int n;
cin  n;
switch (n)
{
case 1
cout  Radio started channel no.13.n  endl;
break;
case 2
cout  Bluetooth connected.n  endl;
break;
case 3
main_menu();
break;
case 0
cout  Exited.;
exit(0);
 
default
cout  Entered wrong number.;
}
}
}

};
int main()
{
Navigation navigation;
navigation.choice();
 
return 0;
}
Task-2
#include iostream
#include bitsstdc++.h
using namespace std;
 
class VehicleData 
{
private
    int speed;
    double fuelLevel;
    int temperature;
 
public
    VehicleData ()  speed(0), fuelLevel(100.0) , temperature(90)
    {
        srand(time(0));
    }
    
    void updatedata ()
    {
        speed = rand() % 181;
        fuelLevel -= (rand() % 3)  10.0;
        if (fuelLevel  0)
        {
            fuelLevel = 0;
        }
        temperature = 80 + rand() % 41;
    }
    
    void getData (int& outspeed, double& outfuelLevel, int& outtemperature)
    {
        outspeed = speed;
        outfuelLevel = fuelLevel;
        outtemperature = temperature;
    }
};
 
class Display
{
public
    static void displaydata (VehicleData& vehicleData)
    {
        int speed;
        double fuelLevel;
        int temperature;
        
        vehicleData.getData (speed, fuelLevel, temperature);
        
        cout  Instrument Cluster Data Display  endl;
        cout  speed   speed  kmh  endl;
        cout  fuelLevel   fixed  setprecision(1)  fuelLevel %  endl;
        cout  temperature   temperature C  endl;
        
        if (fuelLevel  10)
        {
            cout  warning  low fuel!  endl;
        }
        if (temperature  100)
        {
            cout  warning  high temperature!  endl;
        }
    }
};
 
 
Int main ( )
{
    VehicleData vc;
    vc.updatedata();
    
    Display d;
    d.displaydata(vc);
    return 0;
}


Task-3
#include iostream 
#include queue 
#include string 
using namespace std; 
  
enum EventType  
{ 
    TAP, 
    SWIPE 
}; 
  
class Events  
{ 
public 
    EventType eventType; 
    int x, y;        
    time_t timestamp;   
  
    Events(EventType type, int xCoord, int yCoord, time_t time) 
         eventType(type), x(xCoord), y(yCoord), timestamp(time) {} 
}; 
  
void processEvent(const Events& event)  
{ 
    cout  Timestamp   ctime(&event.timestamp) 
         Event Type ; 
  
    if (event.eventType == TAP)  
    { 
        cout  Tap at position (  event.x  ,   event.y  )  endl; 
    } else if (event.eventType == SWIPE) 
    { 
        cout  Swipe from position (  event.x  ,   event.y  ) ; 
        if (event.x  0) 
        { 
            cout  rightendl; 
        } else if (event.x  0) { 
            cout  leftendl; 
        } else if (event.y  0) { 
            cout  downendl; 
        } else { 
            cout  upendl; 
        } 
    } 
} 
  
  
void simulateEvents(queueEvents& eventQueue) 
{ 
    const int numEvents = 5; 
  
    for (int i = 0; i  numEvents; ++i)  
    { 
        EventType eventType = (rand() % 2 == 0)  TAP  SWIPE; 
        int x = rand() % 200 - 100;   
        int y = rand() % 200 - 100;   
        time_t timestamp = time(nullptr);  
  
        
        eventQueue.push(Events(eventType, x, y, timestamp)); 
    } 
} 
  
int main()  
{ 
    queueEvents eventQueue; 
    simulateEvents(eventQueue); 
    while (!eventQueue.empty())  
    { 
        Events event = eventQueue.front(); 
        eventQueue.pop();   
         processEvent(event);   
    } 
  
    return 0; 
}

Task-4
#include iostream
#include map
#include string
using namespace std;
class Theme
{
    public
        string backgroundColor;
        string fontColor;
        int fontSize;
        string iconStyle;
        Theme(string backgroundColor =Purple,string fontColor =Brown, int fontSize = 10, string iconStyle = Standard)
        {
            this-backgroundColor = backgroundColor; 
            this-fontColor = fontColor;
            this-fontSize = fontSize;
            this-iconStyle = iconStyle;
        }
        void previewTheme() const 
        {
            cout niconStyle   Themen;
            cout  Background Color   backgroundColor  n;
            cout  Font Color   fontColor  n;
            cout  Font Size   fontSize  n;
            cout  Icon Style   iconStyle  n;
        }
};
int main()
{
    Theme t1;
    t1.previewTheme();
    Theme classic ={White, Pink, 24, Classic};
    Theme sport ={Red, Yellow, 17, Sport};
    Theme eco ={Green, Orange, 19, Eco};
    mapstring,Theme themes;
    themes[Classic] = classic;
    themes[Sport] = sport;
    themes[Eco] = eco;
    cout  nSelect a theme n;
    cout  1. Classicn2. Sportn3. Econ;
    int choice;
    cout  Enter your choice (1-3) ;
    cin  choice;
    switch(choice)
    {
        case 1
            themes[Classic].previewTheme();
            coutSuccessfully changed the theme to Classic.endl;
            break;
        case 2
            themes[Sport].previewTheme();
            coutSuccessfully changed the theme to Sport.endl;
            break;
        case 3
            themes[Eco].previewTheme();
            coutSuccessfully changed the theme to Eco.endl;
            break;
        default
             cout  Invalid choice. Please select a valid theme (1-3).n;
    }
}
